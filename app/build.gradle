apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs"
apply plugin: 'com.google.gms.google-services' // Google Services Gradle plugin
apply plugin: 'com.google.firebase.crashlytics' //Crashlytics Gradle plugin

android {
    compileSdkVersion compileSdkVer
    buildToolsVersion buildToolsVer

    defaultConfig {
        minSdkVersion minSdkVer
        targetSdkVersion targetSdkVer
        applicationId "org.akf.steps4impact"
        versionCode 41
        versionName "0.9.8.2.beta"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        buildConfigField("boolean", "DEBUG_FEATURES", "true")

    }

    signingConfigs {
        debugConfig {
            storeFile file("debug.keystore")
            keyAlias "androiddebugkey"
            storePassword "android"
            keyPassword "android"

        }
        releaseConfig {
            storeFile file("akf_wcf.keystore")
            keyAlias "wcf_android"
            keyPassword 'credentials.properties'
            storePassword 'credentials.properties'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false

            signingConfig signingConfigs.releaseConfig
            loadProperties()
            //fitbit app in steps4impactapp@gmail.com fitbit acc
            manifestPlaceholders = [
                    fitbit_client_id          : "$buildProps.release_fitbit_client_id",
                    fitbit_client_secret      : "$buildProps.release_fitbit_client_secret",
                    fitbit_client_redirect_url: "$buildProps.release_fitbit_client_redirect_url",
                    facebook_app_id           : "$buildProps.release_facebook_app_id",
                    prod_wcb_server_password  : "$buildProps.prod_wcb_server_password",
                    stage_wcb_server_password : "$buildProps.stage_wcb_server_password",
                    dev_wcb_server_password   : "$buildProps.dev_wcb_server_password",
                    wcb_image_server_accname  : "$buildProps.wcb_image_server_accname",
                    wcb_image_server_acckey   : "$buildProps.wcb_image_server_acckey",
                    wcb_image_server_url      : "$buildProps.wcb_image_server_url",
                    wcb_image_server_container: "$buildProps.wcb_image_server_container",
                    prod_wcb_image_folder     : "$buildProps.prod_wcb_image_folder",
                    stage_wcb_image_folder    : "$buildProps.stage_wcb_image_folder",
                    dev_wcb_image_folder      : "$buildProps.dev_wcb_image_folder"
            ]
        }
        debug {
            minifyEnabled false
//            applicationIdSuffix ".debug"
//            versionNameSuffix = "-debug"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable true

            signingConfig signingConfigs.debugConfig
            loadProperties()

            //fitbit test app in keshwaniz@gmail.com fitbit acc
            manifestPlaceholders = [
                    fitbit_client_id          : "$buildProps.debug_fitbit_client_id",
                    fitbit_client_secret      : "$buildProps.debug_fitbit_client_secret",
                    fitbit_client_redirect_url: "$buildProps.debug_fitbit_client_redirect_url",
                    facebook_app_id           : "$buildProps.debug_facebook_app_id",
                    prod_wcb_server_password  : "$buildProps.prod_wcb_server_password",
                    stage_wcb_server_password : "$buildProps.stage_wcb_server_password",
                    dev_wcb_server_password   : "$buildProps.dev_wcb_server_password",
                    wcb_image_server_accname  : "$buildProps.wcb_image_server_accname",
                    wcb_image_server_acckey   : "$buildProps.wcb_image_server_acckey",
                    wcb_image_server_url      : "$buildProps.wcb_image_server_url",
                    wcb_image_server_container: "$buildProps.wcb_image_server_container",
                    prod_wcb_image_folder     : "$buildProps.prod_wcb_image_folder",
                    stage_wcb_image_folder    : "$buildProps.stage_wcb_image_folder",
                    dev_wcb_image_folder      : "$buildProps.dev_wcb_image_folder"
            ]
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    androidExtensions {
        experimental = true
    }

    android {
        lintOptions {
            checkReleaseBuilds true
            // Or, if you prefer, you can continue to check for errors in release builds,
            // but continue the build even when errors are found:
            abortOnError false
        }
    }

    configurations.all {
        //resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.1'
        resolutionStrategy.force "com.android.support:support-annotations:${supportLibVersion}"
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"
    }
    testOptions { unitTests.all { jvmArgs '-noverify' } }
}


def loadProperties() {
    def filename = "app/credentials.properties"
    def propFile = new File("$filename")
    def buildProps = new Properties()

    if (propFile.exists() && propFile.canRead()) {
        println "Attempting to load from $filename"
        buildProps.load(new FileInputStream(propFile))

        project.ext.buildProps = buildProps
        if (buildProps != null && buildProps.containsKey('release_wcfStorePassword') && buildProps.containsKey('release_wcfKeyStorePassword')) {
            android.signingConfigs.releaseConfig.storePassword = buildProps['release_wcfStorePassword']
            android.signingConfigs.releaseConfig.keyPassword = buildProps['release_wcfKeyStorePassword']
        } else {
            println "\nYou don't have $filename set up properly. You should have this file and define the variables release_wcfStorePassword and release_wcfKeyStorePassword to create Release builds\n\n"
        }
    } else {
        println "\nYou don't have $filename set up. You should have this file and define the variables release_wcfStorePassword and release_wcfKeyStorePassword to create Release builds\n\n"
    }
}

repositories {
    google()
    jcenter()
}

dependencies {
    // jars
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':pageindicatorview')
    implementation project(':fitbitsdk')

    //Support Libs
    implementation "androidx.appcompat:appcompat:${supportAppCompatLibVersion}"
    implementation "androidx.cardview:cardview:${cardViewLibVersion}"
    implementation "androidx.annotation:annotation:${supportLibVersion}"
    implementation "androidx.constraintlayout:constraintlayout:${constraintLayoutVersion}"
    implementation "androidx.vectordrawable:vectordrawable:${supportVectorDrawbleLibVersion}"
    implementation "androidx.multidex:multidex:${multidexLibVersion}"
    implementation "androidx.preference:preference:${supportPreferenceLibVersion}"

    implementation "androidx.core:core-ktx:${versions_core_ktx}"
    implementation "androidx.arch.core:core-runtime:$versions_arch_core"
    implementation "androidx.arch.core:core-testing:$versions_arch_core"

    // Navigation
    implementation "androidx.navigation:navigation-runtime-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"

    implementation "com.google.android.material:material:${supportMaterialLibVersion}"

    implementation "com.google.android.gms:play-services-fitness:${playServicesFitnessVersion}"

    implementation platform("com.google.firebase:firebase-bom:${firebaseBOMVersion}")
    implementation "com.google.firebase:firebase-analytics"
    implementation "com.google.firebase:firebase-crashlytics"
    implementation "com.google.firebase:firebase-messaging"
    implementation "com.google.firebase:firebase-auth:${firebaseAuthVersion}"
   // implementation "com.firebaseui:firebase-ui-auth:${firebaseUiAuthVersion}"

    //    implementation "androidx.legacy:legacy-support-v4:${supportLibVersion}"
    //Install Referrer
    implementation 'com.android.installreferrer:installreferrer:1.0'

    //Google Play Services
    implementation "com.google.android.gms:play-services-gcm:${playServicesGcmVersion}"
    implementation "com.google.android.gms:play-services-auth:${payServicesAuthVersion}"

    implementation "com.google.android.play:core:${playServicesCoreVersion}"

    // Required only if Facebook login support is required
    // Find the latest Facebook SDK releases here: https://goo.gl/Ce5L94
    implementation "com.facebook.android:facebook-core:${facebookSdkVersion}"
    implementation "com.facebook.android:facebook-login:${facebookSdkVersion}"

    //Facebook
    implementation("com.facebook.android:facebook-android-sdk:${facebookSdkVersion}") {
        exclude group: 'com.android.support'
    }

    implementation("com.facebook.android:facebook-share:${facebookSdkVersion}") {
        exclude group: 'com.android.support'
    }

    //ExoPlayer Google
    implementation "com.google.android.exoplayer:exoplayer-core:${exoPlayerVersion}"
    implementation "com.google.android.exoplayer:exoplayer-dash:${exoPlayerVersion}"
    implementation "com.google.android.exoplayer:exoplayer-ui:${exoPlayerVersion}"
    implementation "com.google.android.exoplayer:exoplayer-hls:${exoPlayerVersion}"

    // dagger
    implementation "com.google.dagger:dagger-android:${dagger2Version}"
    implementation "com.google.dagger:dagger-android-support:${dagger2Version}"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    kapt "com.google.dagger:dagger-android-processor:${dagger2Version}"
    kapt "com.google.dagger:dagger-compiler:${daggerKaptCompilerVersion}"
    kaptTest "com.google.dagger:dagger-compiler:${daggerKaptCompilerVersion}"

    //Retrofit
    implementation "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:${retrofitLoggingInterceptorVersion}"

    //RxJava
    implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofitVersion}"
    implementation "io.reactivex.rxjava2:rxandroid:${rxAndroidVersion}"
    implementation "io.reactivex.rxjava2:rxjava:${rxJavaVersion}"

    //Gson
    implementation "com.google.code.gson:gson:${gsonVersion}"

    //Glide Image Loading
    implementation "com.github.bumptech.glide:glide:${glideVersion}"
    kapt "com.github.bumptech.glide:compiler:${glideVersion}"

    //circular imageview
    implementation "de.hdodenhof:circleimageview:${circleimageviewVersion}"

    //Azure
    implementation "com.microsoft.azure.android:azure-storage-android:${azureStorageAndroidVersion}"
//    implementation "com.microsoft.azure:azure-mobile-android:${azureMobileAndroidVersion}"
//    implementation "com.microsoft.identity.client:msal:${MicrosoftAuthenticationLibVersion}"
//    implementation "com.microsoft.identity.client:msal:${MicrosoftAuthenticationLibVersion}"


    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    //Testing
    testImplementation "junit:junit:${jUnitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    //testImplementation 'org.json:json:20140107'
    testImplementation "org.robolectric:robolectric:${robolectricVersion}"

    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation "androidx.test.espresso:espresso-core:${espressoVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-intents:${espressoVersion}"
    androidTestImplementation "androidx.test:runner:${testRunnerVersion}"

//    espressoExclude = [findBugsGroup : 'com.google.code.findbugs',
//                       findBugsModule: 'jsr305',
//                       supportGroup  : 'com.android.support',
//                       supportModule : 'support-annotations']


}
